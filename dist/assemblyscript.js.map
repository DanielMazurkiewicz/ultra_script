{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","returnType","byteSize","_l","values","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","Namespace","DECLARE","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","align","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","createSIMDExtract","vec","idx","_BinaryenSIMDExtract","createSIMDReplace","_BinaryenSIMDReplace","createSIMDShuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","createSIMDBitselect","cond","_BinaryenSIMDBitselect","createSIMDShift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createUidStatement","uniqueIdentifier","UidStatement","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","UID","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","kindOnly","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","AllTrueVecI8x16","EqVecI8x16","NeI32","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","buffer_offset","length_offset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","stack","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","Set","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseUid","us","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","isAsm","evaluateConstantType","isFloat","isSigned","isReference","isString","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","alignLog2","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","atomic_notify","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","alreadyUnchecked","call_indirect","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","iterateRoots","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","funcName","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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AM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n}\n\n/** Common standard library symbols. */\nexport namespace LibrarySymbols {\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  // runtime\n  export const memory = \"memory\";\n  export const allocate = \"allocate\";\n  export const abort = \"abort\";\n  export const main = \"main\";\n  // other\n  export const length = \"length\";\n  export const byteLength = \"byteLength\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  LibrarySymbols\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  UidStatement,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Explicitly annotated start function. */\n  explicitStartFunction: FunctionPrototype | null = null;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n\n  // runtime references\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  // gc integration\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range,\n            queuedImport.foreignPath,\n            foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let elementsByName = this.elementsByName;\n          let element = elementsByName.get(name);\n          if (element) {\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n            elementsByName.set(alias, element);\n          }\n          else throw new Error(\"no such global element: \" + name);\n        }\n      }\n    }\n\n    // register global library elements\n    {\n      let element: Element | null;\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayPrototype = <ClassPrototype>element;\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n        }\n      }\n    }\n\n    // register GC hooks if present\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\n    // code cannot call without explicitly enabling it with a flag.\n    if (\n      this.elementsByName.has(\"__gc_allocate\") &&\n      this.elementsByName.has(\"__gc_link\") &&\n      this.elementsByName.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsByName.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): void {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name);\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (decorator.range.source.isLibrary) {\n              flags |= flag;\n            } else {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** SO far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.NONE;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\n        validDecorators |= DecoratorFlags.START;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return;\n    if (element.hasDecorator(DecoratorFlags.START)) {\n      if (this.explicitStartFunction) {\n        this.error(\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\n        );\n      } else this.explicitStartFunction = element;\n    }\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new Namespace(name, parent, declaration);\n    if (!parent.add(name, element)) return;\n    element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, element);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, element);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, element);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, element);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, element);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is the explicit start function. */\n  START = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.START: return DecoratorFlags.START;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple na,e */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do {\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(this.program.options.usizeType.asClass(this));\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createV128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr, type);\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenSetGlobal(this.ref, cStr, value);\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  createMemoryCopy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  createMemoryFill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  createSIMDExtract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  createSIMDReplace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  createSIMDShuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createSIMDBitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  createSIMDShift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64:\n    case NativeType.V128: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  UID,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createUidStatement(\n    uniqueIdentifier: IdentifierExpression,\n    statement: Statement,\n    range: Range\n  ): UidStatement {\n    var stmt = new UidStatement();\n    stmt.range = range;\n    stmt.uniqueIdentifier = uniqueIdentifier;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  START\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        if (nameStr == \"start\") return DecoratorKind.START;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `uid` statement. */\nexport class UidStatement extends Statement {\n  kind = NodeKind.UID;\n  /** Unique identifier */\n  uniqueIdentifier: IdentifierExpression;\n  /** Array of uid members. */\n  statement: Statement;\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: CommonTypeNode): bool {\n  if (type.kind == NodeKind.TYPE) {\n    let name = (<TypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.name + \" | null\"\n          : classReference.name;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n      case TypeKind.V128: return module.createV128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  UID,          // @ultra/script\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.u: {\n      switch (text) {\n        case \"uid\": return Token.UID;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.UID:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < this.end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      return this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook,\n  BuiltinSymbols\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  LibrarySymbols,\n  CommonSymbols,\n  INDEX_SUFFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  UidStatement,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or called by main\n    var explicitStartFunction = program.explicitStartFunction;\n    if (startFunctionBody.length || explicitStartFunction) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStartFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.makeModuleExports(file);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private makeModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  // general\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    this.currentFlow = startFunction.flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.createBlock(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.createCall(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // globals\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // resolve now if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // infer from initializer if not annotated\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpressionRetainType( // reports\n          initializerNode,\n          Type.void,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // must either be annotated or have an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(\n          initializerNode,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              initializerNode.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          global.identifierNode.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(\n            valueNode,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.currentBody.push(\n            module.createSetGlobal(val.internalName, initExpr)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    var stmts: BinaryenExportRef[];\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let stmt = this.compileExpression(\n        (<ExpressionStatement>bodyNode).expression,\n        returnType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      flow.set(FlowFlags.RETURNS);\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      stmts = [ stmt ];\n    }\n\n    // make the main function call `start` implicitly, but only once\n    if (instance.prototype == this.program.explicitStartFunction) {\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\n      stmts.unshift(\n        module.createIf(\n          module.createUnary(\n            UnaryOp.EqzI32,\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\n          ),\n          module.createBlock(null, [\n            module.createCall(\"start\", null, NativeType.None),\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\n          ])\n        )\n      );\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n          : 0;\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.createIf(\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\n              ),\n              module.createSetLocal(thisLocalIndex,\n                this.makeAllocation(<Class>classInstance)\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n\n        // implicitly return `this`\n        stmts.push(\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\n        );\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches return\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      this.currentFlow = instance.flow;\n      let stmts = this.compileFunctionBody(instance);\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmts.length\n          ? stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\n          : module.createNop()\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    return true;\n  }\n\n  // classes\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.createUnreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n    var actualFunction = outerFlow.actualFunction;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Each arm initiates a branch\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.createUnreachable();\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\n\n    return module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.compileAssignmentWithValue(declaration.name, initExpr)\n          );\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary loops if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Statements initiate a new branch with its own break context\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          this.currentFlow.actualFunction,\n          this.currentFlow.contextualTypeArguments\n        );\n        if (!toType) return this.module.createUnreachable();\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.createUnreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AllTrueVecI8x16,\n              module.createBinary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.createUnary(UnaryOp.AnyTrueVecI8x16,\n              module.createBinary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.createUnreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var target = this.resolver.resolveExpression(expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.createUnreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.createUnreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n          this.makeCallDirect(getterInstance) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\n        let tempLocalIndex = tempLocal.index;\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.createTeeLocal(tempLocalIndex, thisExpr),\n            valueWithCorrectType\n          ]),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\n          ])\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let stmts: ExpressionRef[] = [\n        module.createSetLocal(thisLocal.index,\n          this.compileCallDirect(\n            this.ensureConstructor(baseClassInstance, expression),\n            expression.arguments,\n            expression,\n            module.createIf(\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              this.makeAllocation(<Class>classInstance)\n            )\n          )\n        )\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing allocating `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.createBlock(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.createUnreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlinePrechecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\n      body.push(\n        module.createSetLocal(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    }\n\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, paramExpr)\n      );\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    this.currentFlow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    {\n      let stmts = this.compileFunctionBody(instance);\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n    this.currentType = returnType;\n\n    // Create an outer block that we can break to when returning a value out of order\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    this.currentFlow = trampoline.flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFlow = previousFlow;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        CompilerSymbols.argc,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return CompilerSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = CompilerSymbols.setargc;\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.signatureNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.createUnreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.createUnreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.createUnreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.createUnreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.createUnreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.createUnreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.createUnreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.createUnreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.createIf(\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\n                  ),\n                  module.createSetLocal(thisLocal.index,\n                    this.makeAllocation(<Class>classInstance)\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.createGetLocal(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.createBlock(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      this.currentFlow.actualFunction\n    );\n    this.currentType = Type.bool;\n    if (!expectedType) return module.createUnreachable();\n\n    // instanceof <basicType> must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.createI32(actualType == expectedType ? 1 : 0);\n    }\n    // <nullable> instanceof <nonNullable> must be != 0\n    if (\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\n      actualType.nonNullableType.isAssignableTo(expectedType)\n    ) {\n      return module.createBinary(\n        actualType.is(TypeFlags.LONG)\n          ? BinaryOp.NeI64\n          : BinaryOp.NeI32,\n        expr,\n        actualType.toNativeZero(module)\n      );\n    }\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\n          default: return module.createI32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    var buffer_offset = pos + arrayInstance.offsetof(\"buffer_\");\n    var length_offset = pos + arrayInstance.offsetof(\"length_\");\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? this.compileExpression(<Expression>expression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(expr);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var flow = this.currentFlow;\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    flow.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    this.currentFlow = instance.flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.createIf(\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.createGetLocal(0, nativeSizeType)\n        ),\n        module.createSetLocal(0,\n          this.makeAllocation(classInstance)\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.createGetLocal(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.createSetLocal(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    stmts.push(\n      module.createGetLocal(0, nativeSizeType)\n    );\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\n      stmts.length == 1\n        ? stmts[0]\n        : module.createBlock(null, stmts, nativeSizeType)\n    );\n    instance.finalize(module, funcRef);\n    this.currentFlow = previousFlow;\n    return instance;\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect(\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module)\n    );\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.freeScopedLocals();\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    ifElseFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(classInstance: Class): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n\n    // __gc_allocate(size, markFn)\n    if (program.hasGC && classInstance.type.isManaged(program)) {\n      let allocateInstance = assert(program.gcAllocateInstance);\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset),\n          module.createI32(\n            ensureGCHook(this, classInstance)\n          )\n        ],\n        options.nativeSizeType\n      );\n\n    // memory.allocate(size)\n    } else {\n      let allocateInstance = program.memoryAllocateInstance;\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset)\n        ],\n        options.nativeSizeType\n      );\n    }\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            this.compileExpression( // reports\n              initializerNode,\n              fieldType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            ),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.createGetLocal(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Special compiler symbols. */\nnamespace CompilerSymbols {\n  /** Module started global. Used if an explicit start function is present. */\n  export const started = \"~lib/started\";\n  /** Argument count global. Used to call trampolines for varargs functions. */\n  export const argc = \"~lib/argc\";\n  /** Argument count setter. Exported for use by host calls. */\n  export const setargc = \"~lib/setargc\";\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getGetGlobalName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  bitsetIs,\n  bitsetSet\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow throws. */\n  THROWS = 1 << 2,\n  /** This flow breaks. */\n  BREAKS = 1 << 3,\n  /** This flow continues. */\n  CONTINUES = 1 << 4,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 6,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 7,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 8,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 9,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 10,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 11,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 12,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 13,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.wrappedLocals = i64_new(0);\n    flow.wrappedLocalsExt = null;\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `currentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = parentFunction.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = parentFunction.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(\n      name,\n      index,\n      type,\n      this.parentFunction\n    );\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the value of the local at the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    if (index < 0) return true; // inlined constant\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!(ext && i < ext.length)) return false;\n    return bitsetIs(ext[i], index - (i + 1) * 64);\n  }\n\n  /** Sets if the value of the local at the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    if (index < 0) return; // inlined constant\n    if (index < 64) {\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\n      return;\n    }\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!ext) {\n      this.wrappedLocalsExt = ext = new Array(i + 1);\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\n    } else {\n      while (ext.length <= i) ext.push(i64_new(0));\n    }\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !this.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      let members = file.members;\n      if (!members) continue;\n      for (let member of members.values()) {\n        // FIXME: doesn't honor the actual externally visible name\n        this.visitElement(member);\n      }\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(<PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.name);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.name); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.parent.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  UidStatement,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (member) members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseUid(\n    tn: Tokenizer,\n    startPos: i32\n  ): UidStatement | null {\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let uniqueIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let statement = this.parseBlockStatement(tn, false);\n        if (!statement) return null;\n        let us = Node.createUidStatement(\n          uniqueIdentifier,\n          statement,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return us;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n}\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64\n} from \"./module\";\n\nimport {\n  ElementKind,\n  OperatorKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n  export const i32_notify = \"~lib/builtins/i32.notify\";\n  export const i64_notify = \"~lib/builtins/i64.notify\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n  // std/memory.ts\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  // std/gc.ts\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      let classPrototype = classReference.prototype;\n      return module.createI32(\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\n          ? 1\n          : 0\n      );\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      return module.createI32(\n        classReference.lookupInSelf(\"length\") && (\n          classReference.lookupOverload(OperatorKind.INDEXED_GET) ||\n          classReference.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET)\n        ) ? 1 : 0\n      );\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.createI32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(byteSize);\n        } else {\n          expr = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(byteSize, 0);\n        } else {\n          expr = module.createI32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.createI32(alignLog2);\n        } else {\n          expr = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.createI64(alignLog2, 0);\n        } else {\n          expr = module.createI32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.createBinary(BinaryOp.XorI32,\n            module.createBinary(BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  wasm64 ? module.createI64(63) : module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.createBinary(BinaryOp.XorI64,\n            module.createBinary(BinaryOp.AddI64,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI64,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI64(63)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.createBinary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.createBinary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type, true);\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\n      flow.freeTempLocal(tempLocal0);\n      return module.createSelect(\n        module.createTeeLocal(tempLocal0.index, arg0),\n        module.createTeeLocal(tempLocal1.index, arg1),\n        module.createBinary(op,\n          module.createGetLocal(tempLocal0.index, nativeType),\n          module.createGetLocal(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.createUnreachable();\n        }\n      }\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          expr = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          expr = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.createUnreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.createLoad(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.createUnreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = outType;\n      return module.createAtomicLoad(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createAtomicStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.createAtomicRMW(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n              : ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        inType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(\n          arg2,\n          inType, type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.createUnreachable();\n      }\n      compiler.currentType = inType;\n      return module.createAtomicCmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        Type.i64,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicWait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.i32;\n      return module.createAtomicWake(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\n        : compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.createSelect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.createUnreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      return module.createHost(HostOp.GrowMemory, null, [\n        compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryCopy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.createUnreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u8,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryFill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        toType,\n        WrapMode.NONE\n      );\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.createUnreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(type, true /* arg0 is wrapped */);\n            expr = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\n            expr = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\n            expr = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\n            expr = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.createUnreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      let expr = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.createUnreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.createUnreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT, WrapMode.NONE);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i8, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i16, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = module.precomputeExpression(\n            compiler.compileExpression(value, Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE)\n          );\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.createUnreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createV128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.createUnreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.createUnreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      return module.createSIMDExtract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = module.precomputeExpression(\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n      );\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.createUnreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDReplace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = module.precomputeExpression(\n          compiler.compileExpression(operand, Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\n        );\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.createUnreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.createSIMDShuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createUnary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.v128;\n      return module.createSIMDShift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createBinary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createUnary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      return module.createSIMDBitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.createUnreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createUnary(op, arg0);\n    }\n\n    // === GC integration =========================================================================\n\n    case BuiltinSymbols.iterateRoots: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      compiler.currentType = Type.void;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.createUnreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringInstance.type.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if required. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeName = Signature.makeSignatureString([ Type.i32 ], Type.void);\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            typeName\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            typeName\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for library elements)\n  var members = classInstance.members;\n  if (classInstance.isDeclaredInLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        \"FUNCSIG$\" + (nativeSizeType == NativeType.I64 ? \"vj\" : \"vi\")\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}